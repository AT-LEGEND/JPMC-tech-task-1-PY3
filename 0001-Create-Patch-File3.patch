From 798091c9e353d6cf3e3152b23b52c3b906932802 Mon Sep 17 00:00:00 2001
From: AT_LEGEND <atlegend0@gmail.com>
Date: Wed, 24 Nov 2021 22:48:54 +0530
Subject: [PATCH] Create Patch File3

---
 0001-Create-Patch-File.patch | 229 ++++++++++++++++++++++++++---------
 client_test.py               |  31 +++--
 solution.patch               |  92 ++++++++++++++
 3 files changed, 285 insertions(+), 67 deletions(-)
 create mode 100644 solution.patch

diff --git a/0001-Create-Patch-File.patch b/0001-Create-Patch-File.patch
index 5fe9e9f..2020e49 100644
--- a/0001-Create-Patch-File.patch
+++ b/0001-Create-Patch-File.patch
@@ -1,76 +1,185 @@
-From db4026be1cecd4ee34a44d98623d802ecc40765f Mon Sep 17 00:00:00 2001
+From 6fca3f57f34ca3282dc78c35b9c4451fa20dd578 Mon Sep 17 00:00:00 2001
 From: AT_LEGEND <atlegend0@gmail.com>
-Date: Tue, 23 Nov 2021 18:22:39 +0530
+Date: Wed, 24 Nov 2021 18:53:16 +0530
 Subject: [PATCH] Create Patch File
 
 ---
- client3.py | 47 ++++++++++++++++++++++++++++-------------------
- 1 file changed, 28 insertions(+), 19 deletions(-)
+ 0001-Create-Patch-File.patch       |  76 +++++++++++++++++++++++++++++
+ __pycache__/client3.cpython-39.pyc | Bin 0 -> 1142 bytes
+ client_test.py                     |  48 ++++++++++++------
+ 3 files changed, 109 insertions(+), 15 deletions(-)
+ create mode 100644 0001-Create-Patch-File.patch
+ create mode 100644 __pycache__/client3.cpython-39.pyc
 
-diff --git a/client3.py b/client3.py
-index f1771c3..a9efea0 100644
---- a/client3.py
-+++ b/client3.py
-@@ -29,31 +29,40 @@ QUERY = "http://localhost:8080/query?id={}"
- # 500 server request
- N = 500
- 
+diff --git a/0001-Create-Patch-File.patch b/0001-Create-Patch-File.patch
+new file mode 100644
+index 0000000..5fe9e9f
+--- /dev/null
++++ b/0001-Create-Patch-File.patch
+@@ -0,0 +1,76 @@
++From db4026be1cecd4ee34a44d98623d802ecc40765f Mon Sep 17 00:00:00 2001
++From: AT_LEGEND <atlegend0@gmail.com>
++Date: Tue, 23 Nov 2021 18:22:39 +0530
++Subject: [PATCH] Create Patch File
 +
- def getDataPoint(quote):
--	""" Produce all of the needed values to generate a datapoint """
--	""" ------------- Update this function ------------- """
--	stock = quote['stock']
--	bid_price = float(quote['top_bid']['price'])
--	ask_price = float(quote['top_ask']['price'])
--	price = bid_price
--	return stock, bid_price, ask_price, price
-+    """ Produce all of the needed values to generate a datapoint """
-+    """ ------------- Update this function ------------- """
-+    stock = quote['stock']
-+    bid_price = float(quote['top_bid']['price'])
-+    ask_price = float(quote['top_ask']['price'])
-+    price = (bid_price+ask_price)/2
-+    return stock, bid_price, ask_price, price
++---
++ client3.py | 47 ++++++++++++++++++++++++++++-------------------
++ 1 file changed, 28 insertions(+), 19 deletions(-)
 +
- 
- def getRatio(price_a, price_b):
--	""" Get ratio of price_a and price_b """
--	""" ------------- Update this function ------------- """
--	""" Also create some unit tests for this function in client_test.py """
--	return 1
-+    """ Get ratio of price_a and price_b """
-+    """ ------------- Update this function ------------- """
-+    """ Also create some unit tests for this function in client_test.py """
-+    if(price_b == 0):
-+        return
-+    return price_a/price_b
++diff --git a/client3.py b/client3.py
++index f1771c3..a9efea0 100644
++--- a/client3.py
+++++ b/client3.py
++@@ -29,31 +29,40 @@ QUERY = "http://localhost:8080/query?id={}"
++ # 500 server request
++ N = 500
++ 
+++
++ def getDataPoint(quote):
++-	""" Produce all of the needed values to generate a datapoint """
++-	""" ------------- Update this function ------------- """
++-	stock = quote['stock']
++-	bid_price = float(quote['top_bid']['price'])
++-	ask_price = float(quote['top_ask']['price'])
++-	price = bid_price
++-	return stock, bid_price, ask_price, price
+++    """ Produce all of the needed values to generate a datapoint """
+++    """ ------------- Update this function ------------- """
+++    stock = quote['stock']
+++    bid_price = float(quote['top_bid']['price'])
+++    ask_price = float(quote['top_ask']['price'])
+++    price = (bid_price+ask_price)/2
+++    return stock, bid_price, ask_price, price
+++
++ 
++ def getRatio(price_a, price_b):
++-	""" Get ratio of price_a and price_b """
++-	""" ------------- Update this function ------------- """
++-	""" Also create some unit tests for this function in client_test.py """
++-	return 1
+++    """ Get ratio of price_a and price_b """
+++    """ ------------- Update this function ------------- """
+++    """ Also create some unit tests for this function in client_test.py """
+++    if(price_b == 0):
+++        return
+++    return price_a/price_b
+++
++ 
++ # Main
++ if __name__ == "__main__":
++ 
++-	# Query the price once every N seconds.
++-	for _ in iter(range(N)):
++-		quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
+++    # Query the price once every N seconds.
+++    for _ in iter(range(N)):
+++        quotes = json.loads(urllib.request.urlopen(
+++            QUERY.format(random.random())).read())
++ 
++-		""" ----------- Update to get the ratio --------------- """
++-		for quote in quotes:
++-			stock, bid_price, ask_price, price = getDataPoint(quote)
++-			print ("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
+++        """ ----------- Update to get the ratio --------------- """
+++        prices = {}
+++        for quote in quotes:
+++            stock, bid_price, ask_price, price = getDataPoint(quote)
+++            prices[stock] = price
+++            print("Quoted %s at (bid:%s, ask:%s, price:%s)" %
+++                  (stock, bid_price, ask_price, price))
++ 
++-		print ("Ratio %s" % getRatio(price, price))
+++        print("Ratio %s" % getRatio(prices["ABC"], prices["DEF"]))
++-- 
++2.33.1.windows.1
 +
+diff --git a/__pycache__/client3.cpython-39.pyc b/__pycache__/client3.cpython-39.pyc
+new file mode 100644
+index 0000000000000000000000000000000000000000..2ccbb655cdc8d985eea2d4b2d11e7d05d7878280
+GIT binary patch
+literal 1142
+zcmYjQOK%%D5GHrItCcJ{Zv0epVFCn=&^mUJOCaRc+HQfMahwDVP{PH6UXJXISGzKo
+z3T#C_sXwC!`Pe_wLw^FVIpy9{FX=308zC_-&g^jJ<E(788U)w#kAKRSsC}%AFIOFn
+zXGrBg$P`gDBZ4~V3C~Gi_)apxlqUk^i%>BY{6R!bg{p=!g1U;1J^eQ{U=G3wozQLa
+z`>AMxKWzbhH$S}r!E^!GlwFVudO@dORZ`qciCBc27`rK!pax45y3fS2SP`pY4c1^0
+zmLCylt2!*h3ar9fkFAgirR3xkPa6=yqMB<H<jppjc$dCk6n#TFtxwnw*&W?JGG@@-
+z*vN`RW=BP7x(_!WZf=|mL7zQM)#DH6>A#ea1nGJOs4=81r1BZEG2+rD=hRf1*Cxux
+z`{=pnY<6w?V{h!Q5*6Gc=WI+XYs`8Ks|iP4zNZT{On}QQ<3*2~Bj7oJ0>$6UYzQSc
+z1wVuwv@{sRl{9itq`BcXC{2+Z+nOl`@j<F=FwkiNGh3F&pFAwFLv7H@3TZll4NiuI
+z0bL#2I(`t(;_DbYQ+3tdUqsKL`0wd<cmMewe^KZ|ne(@)Hba^5ozns66!HYn`C@C`
+zKytKhFvI%y>w~ig`$>jQ^WgsA%r+0fY-6>1RkgP<W$8xFkLUvKCe<xGOR8$FR;5?u
+z0A506OclieYAWvyLOiCo2!iI1?(m<%a0DbRD#%<LvE(vWm-+$M)x+(&PCA~bU4~pK
+z2hK5LO$@XV*7~~2_bpmwh>Wm^GOFjDH;(%<&Et6V&8rGR#qX9}8h#H!?A|TE<JiBG
+z?i$oOqsV2$IP3rL<CgWecYf-8E#`+h%hH4U8gS4`Bf^<&nMwN~*t@dGMX0flqA!A1
+zzwW&L&C*?m({&-a>_Z$|mf}m=0Amlq(%1(0#;O#xtIRdbTnr$$VXx4AX)Mzql?~kp
+zlp=JMmO8@r+(78+hu75uxgl_~l$$SLs%ApZuzJ+TiOt~2G9H!pkVVvOpW%)gxcvp%
+Spv}(>#?Z5X#AxGl<o^!{!ylLc
+
+literal 0
+HcmV?d00001
+
+diff --git a/client_test.py b/client_test.py
+index af2bf26..957fa7f 100644
+--- a/client_test.py
++++ b/client_test.py
+@@ -1,24 +1,42 @@
+ import unittest
+-from client3 import getDataPoint
++from client3 import getDataPoint, getRatio
  
- # Main
- if __name__ == "__main__":
+-class ClientTest(unittest.TestCase):
+-  def test_getDataPoint_calculatePrice(self):
+-    quotes = [
+-      {'top_ask': {'price': 121.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+-      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+-    ]
+-    """ ------------ Add the assertion below ------------ """
  
--	# Query the price once every N seconds.
--	for _ in iter(range(N)):
--		quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
-+    # Query the price once every N seconds.
-+    for _ in iter(range(N)):
-+        quotes = json.loads(urllib.request.urlopen(
-+            QUERY.format(random.random())).read())
+-  def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
+-    quotes = [
+-      {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+-      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+-    ]
+-    """ ------------ Add the assertion below ------------ """
++class ClientTest(unittest.TestCase):
++    def test_getDataPoint_calculatePrice(self):
++        quotes = [
++            {'top_ask': {'price': 121.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453',
++                'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
++            {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453',
++             'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
++        ]
++        """ ------------ Add the assertion below ------------ """
++        for quote in quotes:
++            self.assertEqual(getDataPoint(
++                quote), (quote['stock'], quote['top_bid']['price'], quote['top_ask']['price'], (quote['top_ask']['price']+quote['top_bid']['price'])/2))
  
--		""" ----------- Update to get the ratio --------------- """
--		for quote in quotes:
--			stock, bid_price, ask_price, price = getDataPoint(quote)
--			print ("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
-+        """ ----------- Update to get the ratio --------------- """
-+        prices = {}
++    def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
++        quotes = [
++            {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453',
++                'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
++            {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453',
++             'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
++        ]
++        """ ------------ Add the assertion below ------------ """
 +        for quote in quotes:
-+            stock, bid_price, ask_price, price = getDataPoint(quote)
-+            prices[stock] = price
-+            print("Quoted %s at (bid:%s, ask:%s, price:%s)" %
-+                  (stock, bid_price, ask_price, price))
++            self.assertEqual(getDataPoint(
++                quote), (quote['stock'], quote['top_bid']['price'], quote['top_ask']['price'], (quote['top_ask']['price']+quote['top_bid']['price'])/2))
+ 
+-  """ ------------ Add more unit tests ------------ """
++    """ ------------ Add more unit tests ------------ """
+ 
++    def test_getRatio(self):
++        quotes = [
++            {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453',
++                'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
++            {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453',
++             'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}]
++        self.assertEqual(getRatio(
++            getDataPoint(quotes[0])[3], getDataPoint(quotes[1])[3]), ((quotes[0]['top_ask']['price']+quotes[0]['top_bid']['price'])/(quotes[1]['top_ask']['price']+quotes[1]['top_bid']['price'])))
+ 
  
--		print ("Ratio %s" % getRatio(price, price))
-+        print("Ratio %s" % getRatio(prices["ABC"], prices["DEF"]))
+ if __name__ == '__main__':
 -- 
 2.33.1.windows.1
 
diff --git a/client_test.py b/client_test.py
index 957fa7f..72dc04a 100644
--- a/client_test.py
+++ b/client_test.py
@@ -30,13 +30,30 @@ class ClientTest(unittest.TestCase):
     """ ------------ Add more unit tests ------------ """
 
     def test_getRatio(self):
-        quotes = [
-            {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453',
-                'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
-            {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453',
-             'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}]
-        self.assertEqual(getRatio(
-            getDataPoint(quotes[0])[3], getDataPoint(quotes[1])[3]), ((quotes[0]['top_ask']['price']+quotes[0]['top_bid']['price'])/(quotes[1]['top_ask']['price']+quotes[1]['top_bid']['price'])))
+        def test_getRatio_priceBZero(self):
+            price_a = 119.2
+            price_b = 0
+            self.assertIsNone(getRatio(price_a, price_b))
+
+        def test_getRatio_priceAZero(self):
+            price_a = 0
+            price_b = 121.68
+            self.assertEqual(getRatio(price_a, price_b), 0)
+
+        def test_getRatio_greaterThan1(self):
+            price_a = 346.48
+            price_b = 166.39
+            self.assertGreater(getRatio(price_a, price_b), 1)
+
+        def test_getRatio_LessThan1(self):
+            price_a = 166.39
+            price_b = 356.48
+            self.assertLess(getRatio(price_a, price_b), 1)
+
+        def test_getRatio_exactlyOne(self):
+            price_a = 356.48
+            price_b = 356.48
+            self.assertEqual(getRatio(price_a, price_b), 1)
 
 
 if __name__ == '__main__':
diff --git a/solution.patch b/solution.patch
new file mode 100644
index 0000000..afa6a02
--- /dev/null
+++ b/solution.patch
@@ -0,0 +1,92 @@
+diff --git a/client.py b/client.py
+index 40badcd..e8b44b1 100644
+--- a/client.py
++++ b/client.py
+@@ -35,14 +35,17 @@ def getDataPoint(quote):
+ 	stock = quote['stock']
+ 	bid_price = float(quote['top_bid']['price'])
+ 	ask_price = float(quote['top_ask']['price'])
+-	price = bid_price
++	price = (bid_price + ask_price)/2
+ 	return stock, bid_price, ask_price, price
+ 
+ def getRatio(price_a, price_b):
+ 	""" Get ratio of price_a and price_b """
+ 	""" ------------- Update this function ------------- """
+ 	""" Also create some unit tests for this function in client_test.py """
+-	return 1
++	if (price_b == 0):
++		# when price_b is 0 avoid throwing ZeroDivisionError
++		return
++	return price_a/price_b
+ 
+ # Main
+ if __name__ == "__main__":
+@@ -52,8 +55,10 @@ if __name__ == "__main__":
+ 		quotes = json.loads(urllib2.urlopen(QUERY.format(random.random())).read())
+ 
+ 		""" ----------- Update to get the ratio --------------- """
++		prices = {}
+ 		for quote in quotes:
+ 			stock, bid_price, ask_price, price = getDataPoint(quote)
++			prices[stock] = price
+ 			print "Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price)
+ 
+-		print "Ratio %s" % getRatio(price, price)
++		print "Ratio %s" % getRatio(prices['ABC'], prices['DEF'])
+diff --git a/client_test.py b/client_test.py
+index a608a01..8462584 100644
+--- a/client_test.py
++++ b/client_test.py
+@@ -1,5 +1,5 @@
+ import unittest
+-from client import getDataPoint
++from client import getDataPoint, getRatio
+ 
+ class ClientTest(unittest.TestCase):
+   def test_getDataPoint_calculatePrice(self):
+@@ -8,6 +8,8 @@ class ClientTest(unittest.TestCase):
+       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+     ]
+     """ ------------ Add the assertion below ------------ """
++    for quote in quotes:
++      self.assertEqual(getDataPoint(quote), (quote['stock'], quote['top_bid']['price'], quote['top_ask']['price'], (quote['top_bid']['price'] + quote['top_ask']['price'])/2))
+ 
+   def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
+     quotes = [
+@@ -15,11 +17,35 @@ class ClientTest(unittest.TestCase):
+       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+     ]
+     """ ------------ Add the assertion below ------------ """
++    for quote in quotes:
++      self.assertEqual(getDataPoint(quote), (quote['stock'], quote['top_bid']['price'], quote['top_ask']['price'], (quote['top_bid']['price'] + quote['top_ask']['price'])/2))
+ 
+ 
+   """ ------------ Add more unit tests ------------ """
++  def test_getRatio_priceBZero(self):
++    price_a = 119.2
++    price_b = 0
++    self.assertIsNone(getRatio(price_a, price_b))
+ 
++  def test_getRatio_priceAZero(self):
++    price_a = 0
++    price_b = 121.68
++    self.assertEqual(getRatio(price_a, price_b), 0)
+ 
++  def test_getRatio_greaterThan1(self):
++    price_a = 346.48
++    price_b = 166.39
++    self.assertGreater(getRatio(price_a, price_b), 1)
++
++  def test_getRatio_LessThan1(self):
++    price_a = 166.39
++    price_b = 356.48
++    self.assertLess(getRatio(price_a, price_b), 1)
++
++  def test_getRatio_exactlyOne(self):
++    price_a = 356.48
++    price_b = 356.48
++    self.assertEqual(getRatio(price_a, price_b), 1)
+ 
+ if __name__ == '__main__':
+     unittest.main()
-- 
2.33.1.windows.1

